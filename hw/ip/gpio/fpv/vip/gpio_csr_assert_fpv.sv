// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// FPV CSR read and write assertions auto-generated by `reggen` containing data structure
// Do Not Edit directly


// Block: gpio
module gpio_csr_assert_fpv import tlul_pkg::*; (
  input clk_i,
  input rst_ni,

  //tile link ports
  input tl_h2d_t h2d,
  input tl_d2h_t d2h
);

  // mask register to convert byte to bit
  logic [31:0] a_mask_bit;

  assign a_mask_bit[7:0]   = h2d.a_mask[0] ? '1 : '0;
  assign a_mask_bit[15:8]  = h2d.a_mask[1] ? '1 : '0;
  assign a_mask_bit[23:16] = h2d.a_mask[2] ? '1 : '0;
  assign a_mask_bit[31:24] = h2d.a_mask[3] ? '1 : '0;

  // declare common read and write sequences
  sequence device_wr_S(logic [5:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {PutFullData, PutPartialData} && h2d.a_valid && h2d.d_ready && !d2h.d_valid;
  endsequence

  sequence device_rd_S(logic [5:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {Get} && h2d.a_valid && h2d.d_ready && !d2h.d_valid;
  endsequence

  // declare common read and write properties
  property wr_P(int width, bit [5:0] addr, bit [31:0] compare_data, bit regen = 1);
    logic [31:0] id;
    logic [width:0] data;
    (device_wr_S(addr),id = h2d.a_source, data = h2d.a_data & a_mask_bit) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && compare_data == data) || !regen)));
  endproperty

  property wr_ext_P(int width, bit [5:0] addr, bit [31:0] compare_data, bit regen = 1);
    logic [31:0] id;
    logic [width:0] data;
    logic [width:0] compare_value;
    (device_wr_S(addr),id = h2d.a_source, data = h2d.a_data & a_mask_bit,
        compare_value = compare_data) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && compare_value == data) || !regen)));
  endproperty

  property rd_P(int width, bit [5:0] addr, bit [31:0] compare_data);
    logic [31:0] id;
    logic [width:0] data;
    (device_rd_S(addr), id = h2d.a_source, data = $past(compare_data)) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && d2h.d_data == data))));
  endproperty

  property rd_ext_P(int width, bit [5:0] addr, bit [31:0] compare_data);
    logic [31:0] id;
    logic [width:0] data;
    (device_rd_S(addr), id = h2d.a_source, data = compare_data) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && d2h.d_data == data))));
  endproperty

  property wr_regen_stable_P(regen, compare_data);
    (!regen && $stable(regen)) |-> $stable(compare_data);
  endproperty

// for all the regsters, declare assertion

  // read/write assertions for register: intr_state
  `ASSERT(intr_state_wr_A, wr_P(31, 6'h0, i_gpio.reg2hw.intr_state.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_state_rd_A, rd_P(31, 6'h0, i_gpio.hw2reg.intr_state.d), clk_i, !rst_ni)

  // read/write assertions for register: intr_enable
  `ASSERT(intr_enable_wr_A, wr_P(31, 6'h4, i_gpio.reg2hw.intr_enable.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_enable_rd_A, rd_P(31, 6'h4, i_gpio.reg2hw.intr_enable.q), clk_i, !rst_ni)

  // read/write assertions for register: intr_test
  `ASSERT(intr_test_wr_A, wr_ext_P(31, 6'h8, i_gpio.reg2hw.intr_test.q, 0), clk_i, !rst_ni)

  // read/write assertions for register: data_in
  `ASSERT(data_in_rd_A, rd_P(31, 6'hc, i_gpio.hw2reg.data_in.d), clk_i, !rst_ni)

  // read/write assertions for register: direct_out
  `ASSERT(direct_out_wr_A, wr_ext_P(31, 6'h10, i_gpio.reg2hw.direct_out.q, 0), clk_i, !rst_ni)
  `ASSERT(direct_out_rd_A, rd_ext_P(31, 6'h10, i_gpio.hw2reg.direct_out.d), clk_i, !rst_ni)

  // read/write assertions for register: masked_out_lower
  `ASSERT(masked_out_lower_wr_A, wr_ext_P(31, 6'h14, i_gpio.reg2hw.masked_out_lower.q, 0), clk_i, !rst_ni)
  `ASSERT(masked_out_lower_rd_A, rd_ext_P(31, 6'h14, i_gpio.hw2reg.masked_out_lower.d), clk_i, !rst_ni)

  // read/write assertions for register: masked_out_upper
  `ASSERT(masked_out_upper_wr_A, wr_ext_P(31, 6'h18, i_gpio.reg2hw.masked_out_upper.q, 0), clk_i, !rst_ni)
  `ASSERT(masked_out_upper_rd_A, rd_ext_P(31, 6'h18, i_gpio.hw2reg.masked_out_upper.d), clk_i, !rst_ni)

  // read/write assertions for register: direct_oe
  `ASSERT(direct_oe_wr_A, wr_ext_P(31, 6'h1c, i_gpio.reg2hw.direct_oe.q, 0), clk_i, !rst_ni)
  `ASSERT(direct_oe_rd_A, rd_ext_P(31, 6'h1c, i_gpio.hw2reg.direct_oe.d), clk_i, !rst_ni)

  // read/write assertions for register: masked_oe_lower
  `ASSERT(masked_oe_lower_wr_A, wr_ext_P(31, 6'h20, i_gpio.reg2hw.masked_oe_lower.q, 0), clk_i, !rst_ni)
  `ASSERT(masked_oe_lower_rd_A, rd_ext_P(31, 6'h20, i_gpio.hw2reg.masked_oe_lower.d), clk_i, !rst_ni)

  // read/write assertions for register: masked_oe_upper
  `ASSERT(masked_oe_upper_wr_A, wr_ext_P(31, 6'h24, i_gpio.reg2hw.masked_oe_upper.q, 0), clk_i, !rst_ni)
  `ASSERT(masked_oe_upper_rd_A, rd_ext_P(31, 6'h24, i_gpio.hw2reg.masked_oe_upper.d), clk_i, !rst_ni)

  // read/write assertions for register: intr_ctrl_en_rising
  `ASSERT(intr_ctrl_en_rising_wr_A, wr_P(31, 6'h28, i_gpio.reg2hw.intr_ctrl_en_rising.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_ctrl_en_rising_rd_A, rd_P(31, 6'h28, i_gpio.reg2hw.intr_ctrl_en_rising.q), clk_i, !rst_ni)

  // read/write assertions for register: intr_ctrl_en_falling
  `ASSERT(intr_ctrl_en_falling_wr_A, wr_P(31, 6'h2c, i_gpio.reg2hw.intr_ctrl_en_falling.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_ctrl_en_falling_rd_A, rd_P(31, 6'h2c, i_gpio.reg2hw.intr_ctrl_en_falling.q), clk_i, !rst_ni)

  // read/write assertions for register: intr_ctrl_en_lvlhigh
  `ASSERT(intr_ctrl_en_lvlhigh_wr_A, wr_P(31, 6'h30, i_gpio.reg2hw.intr_ctrl_en_lvlhigh.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_ctrl_en_lvlhigh_rd_A, rd_P(31, 6'h30, i_gpio.reg2hw.intr_ctrl_en_lvlhigh.q), clk_i, !rst_ni)

  // read/write assertions for register: intr_ctrl_en_lvllow
  `ASSERT(intr_ctrl_en_lvllow_wr_A, wr_P(31, 6'h34, i_gpio.reg2hw.intr_ctrl_en_lvllow.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_ctrl_en_lvllow_rd_A, rd_P(31, 6'h34, i_gpio.reg2hw.intr_ctrl_en_lvllow.q), clk_i, !rst_ni)

  // read/write assertions for register: ctrl_en_input_filter
  `ASSERT(ctrl_en_input_filter_wr_A, wr_P(31, 6'h38, i_gpio.reg2hw.ctrl_en_input_filter.q, 0), clk_i, !rst_ni)
  `ASSERT(ctrl_en_input_filter_rd_A, rd_P(31, 6'h38, i_gpio.reg2hw.ctrl_en_input_filter.q), clk_i, !rst_ni)

endmodule
