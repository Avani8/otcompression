// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// FPV CSR read and write assertions auto-generated by `reggen` containing data structure
// Do Not Edit directly


// Block: usbuart
module usbuart_csr_assert_fpv import tlul_pkg::*; (
  input clk_i,
  input rst_ni,

  //tile link ports
  input tl_h2d_t h2d,
  input tl_d2h_t d2h
);

  // mask register to convert byte to bit
  logic [31:0] a_mask_bit;

  assign a_mask_bit[7:0]   = h2d.a_mask[0] ? '1 : '0;
  assign a_mask_bit[15:8]  = h2d.a_mask[1] ? '1 : '0;
  assign a_mask_bit[23:16] = h2d.a_mask[2] ? '1 : '0;
  assign a_mask_bit[31:24] = h2d.a_mask[3] ? '1 : '0;

  // declare common read and write sequences
  sequence device_wr_S(logic [5:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {PutFullData, PutPartialData} && h2d.a_valid && h2d.d_ready && !d2h.d_valid;
  endsequence

  sequence device_rd_S(logic [5:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {Get} && h2d.a_valid && h2d.d_ready && !d2h.d_valid;
  endsequence

  // declare common read and write properties
  property wr_P(int width, bit [5:0] addr, bit [31:0] compare_data, bit regen = 1);
    logic [31:0] id;
    logic [width:0] data;
    (device_wr_S(addr),id = h2d.a_source, data = h2d.a_data & a_mask_bit) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && compare_data == data) || !regen)));
  endproperty

  property wr_ext_P(int width, bit [5:0] addr, bit [31:0] compare_data, bit regen = 1);
    logic [31:0] id;
    logic [width:0] data;
    logic [width:0] compare_value;
    (device_wr_S(addr),id = h2d.a_source, data = h2d.a_data & a_mask_bit,
        compare_value = compare_data) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && compare_value == data) || !regen)));
  endproperty

  property rd_P(int width, bit [5:0] addr, bit [31:0] compare_data);
    logic [31:0] id;
    logic [width:0] data;
    (device_rd_S(addr), id = h2d.a_source, data = $past(compare_data)) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && d2h.d_data == data))));
  endproperty

  property rd_ext_P(int width, bit [5:0] addr, bit [31:0] compare_data);
    logic [31:0] id;
    logic [width:0] data;
    (device_rd_S(addr), id = h2d.a_source, data = compare_data) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && d2h.d_data == data))));
  endproperty

  property wr_regen_stable_P(regen, compare_data);
    (!regen && $stable(regen)) |-> $stable(compare_data);
  endproperty

// for all the regsters, declare assertion

  // read/write assertions for register: intr_state
  `ASSERT(intr_state_wr_A, wr_P(7, 6'h0, i_usbuart.reg2hw.intr_state.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_state_rd_A, rd_P(7, 6'h0, i_usbuart.hw2reg.intr_state.d), clk_i, !rst_ni)

  // read/write assertions for register: intr_enable
  `ASSERT(intr_enable_wr_A, wr_P(7, 6'h4, i_usbuart.reg2hw.intr_enable.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_enable_rd_A, rd_P(7, 6'h4, i_usbuart.reg2hw.intr_enable.q), clk_i, !rst_ni)

  // read/write assertions for register: intr_test
  `ASSERT(intr_test_wr_A, wr_ext_P(7, 6'h8, i_usbuart.reg2hw.intr_test.q, 0), clk_i, !rst_ni)

  // read/write assertions for register: ctrl
  `ASSERT(ctrl_wr_A, wr_P(31, 6'hc, i_usbuart.reg2hw.ctrl.q, 0), clk_i, !rst_ni)
  `ASSERT(ctrl_rd_A, rd_P(31, 6'hc, i_usbuart.reg2hw.ctrl.q), clk_i, !rst_ni)

  // read/write assertions for register: status
  `ASSERT(status_rd_A, rd_ext_P(5, 6'h10, i_usbuart.hw2reg.status.d), clk_i, !rst_ni)

  // read/write assertions for register: rdata
  `ASSERT(rdata_rd_A, rd_ext_P(7, 6'h14, i_usbuart.hw2reg.rdata.d), clk_i, !rst_ni)

  // read/write assertions for register: wdata
  `ASSERT(wdata_wr_A, wr_P(7, 6'h18, i_usbuart.reg2hw.wdata.q, 0), clk_i, !rst_ni)

  // read/write assertions for register: fifo_ctrl
  `ASSERT(fifo_ctrl_wr_A, wr_P(6, 6'h1c, i_usbuart.reg2hw.fifo_ctrl.q, 0), clk_i, !rst_ni)
  `ASSERT(fifo_ctrl_rd_A, rd_P(6, 6'h1c, i_usbuart.hw2reg.fifo_ctrl.d), clk_i, !rst_ni)

  // read/write assertions for register: fifo_status
  `ASSERT(fifo_status_rd_A, rd_ext_P(21, 6'h20, i_usbuart.hw2reg.fifo_status.d), clk_i, !rst_ni)

  // read/write assertions for register: ovrd
  `ASSERT(ovrd_wr_A, wr_P(1, 6'h24, i_usbuart.reg2hw.ovrd.q, 0), clk_i, !rst_ni)
  `ASSERT(ovrd_rd_A, rd_P(1, 6'h24, i_usbuart.reg2hw.ovrd.q), clk_i, !rst_ni)

  // read/write assertions for register: val
  `ASSERT(val_rd_A, rd_ext_P(15, 6'h28, i_usbuart.hw2reg.val.d), clk_i, !rst_ni)

  // read/write assertions for register: timeout_ctrl
  `ASSERT(timeout_ctrl_wr_A, wr_P(31, 6'h2c, i_usbuart.reg2hw.timeout_ctrl.q, 0), clk_i, !rst_ni)
  `ASSERT(timeout_ctrl_rd_A, rd_P(31, 6'h2c, i_usbuart.reg2hw.timeout_ctrl.q), clk_i, !rst_ni)

  // read/write assertions for register: usbstat
  `ASSERT(usbstat_rd_A, rd_ext_P(22, 6'h30, i_usbuart.hw2reg.usbstat.d), clk_i, !rst_ni)

  // read/write assertions for register: usbparam
  `ASSERT(usbparam_rd_A, rd_ext_P(17, 6'h34, i_usbuart.hw2reg.usbparam.d), clk_i, !rst_ni)

endmodule
