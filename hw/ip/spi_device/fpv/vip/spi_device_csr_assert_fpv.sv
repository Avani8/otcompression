// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// FPV CSR read and write assertions auto-generated by `reggen` containing data structure
// Do Not Edit directly


// Block: spi_device
module spi_device_csr_assert_fpv import tlul_pkg::*; (
  input clk_i,
  input rst_ni,

  //tile link ports
  input tl_h2d_t h2d,
  input tl_d2h_t d2h
);

  // mask register to convert byte to bit
  logic [31:0] a_mask_bit;

  assign a_mask_bit[7:0]   = h2d.a_mask[0] ? '1 : '0;
  assign a_mask_bit[15:8]  = h2d.a_mask[1] ? '1 : '0;
  assign a_mask_bit[23:16] = h2d.a_mask[2] ? '1 : '0;
  assign a_mask_bit[31:24] = h2d.a_mask[3] ? '1 : '0;

  // declare common read and write sequences
  sequence device_wr_S(logic [11:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {PutFullData, PutPartialData} && h2d.a_valid && h2d.d_ready && !d2h.d_valid;
  endsequence

  sequence device_rd_S(logic [11:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {Get} && h2d.a_valid && h2d.d_ready && !d2h.d_valid;
  endsequence

  // declare common read and write properties
  property wr_P(int width, bit [11:0] addr, bit [31:0] compare_data, bit regen = 1);
    logic [31:0] id;
    logic [width:0] data;
    (device_wr_S(addr),id = h2d.a_source, data = h2d.a_data & a_mask_bit) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && compare_data == data) || !regen)));
  endproperty

  property wr_ext_P(int width, bit [11:0] addr, bit [31:0] compare_data, bit regen = 1);
    logic [31:0] id;
    logic [width:0] data;
    logic [width:0] compare_value;
    (device_wr_S(addr),id = h2d.a_source, data = h2d.a_data & a_mask_bit,
        compare_value = compare_data) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && compare_value == data) || !regen)));
  endproperty

  property rd_P(int width, bit [11:0] addr, bit [31:0] compare_data);
    logic [31:0] id;
    logic [width:0] data;
    (device_rd_S(addr), id = h2d.a_source, data = $past(compare_data)) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && d2h.d_data == data))));
  endproperty

  property rd_ext_P(int width, bit [11:0] addr, bit [31:0] compare_data);
    logic [31:0] id;
    logic [width:0] data;
    (device_rd_S(addr), id = h2d.a_source, data = compare_data) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && d2h.d_data == data))));
  endproperty

  property wr_regen_stable_P(regen, compare_data);
    (!regen && $stable(regen)) |-> $stable(compare_data);
  endproperty

// for all the regsters, declare assertion

  // read/write assertions for register: intr_state
  `ASSERT(intr_state_wr_A, wr_P(5, 12'h0, i_spi_device.reg2hw.intr_state.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_state_rd_A, rd_P(5, 12'h0, i_spi_device.hw2reg.intr_state.d), clk_i, !rst_ni)

  // read/write assertions for register: intr_enable
  `ASSERT(intr_enable_wr_A, wr_P(5, 12'h4, i_spi_device.reg2hw.intr_enable.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_enable_rd_A, rd_P(5, 12'h4, i_spi_device.reg2hw.intr_enable.q), clk_i, !rst_ni)

  // read/write assertions for register: intr_test
  `ASSERT(intr_test_wr_A, wr_ext_P(5, 12'h8, i_spi_device.reg2hw.intr_test.q, 0), clk_i, !rst_ni)

  // read/write assertions for register: control
  `ASSERT(control_wr_A, wr_P(17, 12'hc, i_spi_device.reg2hw.control.q, 0), clk_i, !rst_ni)
  `ASSERT(control_rd_A, rd_P(17, 12'hc, i_spi_device.reg2hw.control.q), clk_i, !rst_ni)

  // read/write assertions for register: cfg
  `ASSERT(cfg_wr_A, wr_P(15, 12'h10, i_spi_device.reg2hw.cfg.q, 0), clk_i, !rst_ni)
  `ASSERT(cfg_rd_A, rd_P(15, 12'h10, i_spi_device.reg2hw.cfg.q), clk_i, !rst_ni)

  // read/write assertions for register: fifo_level
  `ASSERT(fifo_level_wr_A, wr_P(31, 12'h14, i_spi_device.reg2hw.fifo_level.q, 0), clk_i, !rst_ni)
  `ASSERT(fifo_level_rd_A, rd_P(31, 12'h14, i_spi_device.reg2hw.fifo_level.q), clk_i, !rst_ni)

  // read/write assertions for register: async_fifo_level
  `ASSERT(async_fifo_level_rd_A, rd_ext_P(23, 12'h18, i_spi_device.hw2reg.async_fifo_level.d), clk_i, !rst_ni)

  // read/write assertions for register: status
  `ASSERT(status_rd_A, rd_ext_P(5, 12'h1c, i_spi_device.hw2reg.status.d), clk_i, !rst_ni)

  // read/write assertions for register: rxf_ptr
  `ASSERT(rxf_ptr_wr_A, wr_P(31, 12'h20, i_spi_device.reg2hw.rxf_ptr.q, 0), clk_i, !rst_ni)
  `ASSERT(rxf_ptr_rd_A, rd_P(31, 12'h20, i_spi_device.hw2reg.rxf_ptr.d), clk_i, !rst_ni)

  // read/write assertions for register: txf_ptr
  `ASSERT(txf_ptr_wr_A, wr_P(31, 12'h24, i_spi_device.reg2hw.txf_ptr.q, 0), clk_i, !rst_ni)
  `ASSERT(txf_ptr_rd_A, rd_P(31, 12'h24, i_spi_device.hw2reg.txf_ptr.d), clk_i, !rst_ni)

  // read/write assertions for register: rxf_addr
  `ASSERT(rxf_addr_wr_A, wr_P(31, 12'h28, i_spi_device.reg2hw.rxf_addr.q, 0), clk_i, !rst_ni)
  `ASSERT(rxf_addr_rd_A, rd_P(31, 12'h28, i_spi_device.reg2hw.rxf_addr.q), clk_i, !rst_ni)

  // read/write assertions for register: txf_addr
  `ASSERT(txf_addr_wr_A, wr_P(31, 12'h2c, i_spi_device.reg2hw.txf_addr.q, 0), clk_i, !rst_ni)
  `ASSERT(txf_addr_rd_A, rd_P(31, 12'h2c, i_spi_device.reg2hw.txf_addr.q), clk_i, !rst_ni)

endmodule
