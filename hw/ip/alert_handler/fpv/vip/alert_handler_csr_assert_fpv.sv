// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// FPV CSR read and write assertions auto-generated by `reggen` containing data structure
// Do Not Edit directly


// Block: alert_handler
module alert_handler_csr_assert_fpv import tlul_pkg::*; (
  input clk_i,
  input rst_ni,

  //tile link ports
  input tl_h2d_t h2d,
  input tl_d2h_t d2h
);

  // mask register to convert byte to bit
  logic [31:0] a_mask_bit;

  assign a_mask_bit[7:0]   = h2d.a_mask[0] ? '1 : '0;
  assign a_mask_bit[15:8]  = h2d.a_mask[1] ? '1 : '0;
  assign a_mask_bit[23:16] = h2d.a_mask[2] ? '1 : '0;
  assign a_mask_bit[31:24] = h2d.a_mask[3] ? '1 : '0;

  // declare common read and write sequences
  sequence device_wr_S(logic [7:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {PutFullData, PutPartialData} && h2d.a_valid && h2d.d_ready && !d2h.d_valid;
  endsequence

  sequence device_rd_S(logic [7:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {Get} && h2d.a_valid && h2d.d_ready && !d2h.d_valid;
  endsequence

  // declare common read and write properties
  property wr_P(int width, bit [7:0] addr, bit [31:0] compare_data, bit regen = 1);
    logic [31:0] id;
    logic [width:0] data;
    (device_wr_S(addr),id = h2d.a_source, data = h2d.a_data & a_mask_bit) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && compare_data == data) || !regen)));
  endproperty

  property wr_ext_P(int width, bit [7:0] addr, bit [31:0] compare_data, bit regen = 1);
    logic [31:0] id;
    logic [width:0] data;
    logic [width:0] compare_value;
    (device_wr_S(addr),id = h2d.a_source, data = h2d.a_data & a_mask_bit,
        compare_value = compare_data) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && compare_value == data) || !regen)));
  endproperty

  property rd_P(int width, bit [7:0] addr, bit [31:0] compare_data);
    logic [31:0] id;
    logic [width:0] data;
    (device_rd_S(addr), id = h2d.a_source, data = $past(compare_data)) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && d2h.d_data == data))));
  endproperty

  property rd_ext_P(int width, bit [7:0] addr, bit [31:0] compare_data);
    logic [31:0] id;
    logic [width:0] data;
    (device_rd_S(addr), id = h2d.a_source, data = compare_data) |->
        strong(##[1:$] (d2h.d_valid && d2h.d_source == id && (d2h.d_error ||
        (!d2h.d_error && d2h.d_data == data))));
  endproperty

  property wr_regen_stable_P(regen, compare_data);
    (!regen && $stable(regen)) |-> $stable(compare_data);
  endproperty

// for all the regsters, declare assertion

  // read/write assertions for register: intr_state
  `ASSERT(intr_state_wr_A, wr_P(3, 8'h0, i_alert_handler.reg2hw.intr_state.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_state_rd_A, rd_P(3, 8'h0, i_alert_handler.hw2reg.intr_state.d), clk_i, !rst_ni)

  // read/write assertions for register: intr_enable
  `ASSERT(intr_enable_wr_A, wr_P(3, 8'h4, i_alert_handler.reg2hw.intr_enable.q, 0), clk_i, !rst_ni)
  `ASSERT(intr_enable_rd_A, rd_P(3, 8'h4, i_alert_handler.reg2hw.intr_enable.q), clk_i, !rst_ni)

  // read/write assertions for register: intr_test
  `ASSERT(intr_test_wr_A, wr_ext_P(3, 8'h8, i_alert_handler.reg2hw.intr_test.q, 0), clk_i, !rst_ni)

  // read/write assertions for register: regen
  `ASSERT(regen_wr_A, wr_P(0, 8'hc, i_alert_handler.reg2hw.regen.q, 0), clk_i, !rst_ni)
  `ASSERT(regen_rd_A, rd_P(0, 8'hc, i_alert_handler.reg2hw.regen.q), clk_i, !rst_ni)

  // read/write assertions for register: ping_timeout_cyc
  `ASSERT(ping_timeout_cyc_wr_A, wr_P(23, 8'h10, i_alert_handler.reg2hw.ping_timeout_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(ping_timeout_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.ping_timeout_cyc.q), clk_i, !rst_ni)
  `ASSERT(ping_timeout_cyc_rd_A, rd_P(23, 8'h10, i_alert_handler.reg2hw.ping_timeout_cyc.q), clk_i, !rst_ni)

  // define local fpv variable for the multi_reg
  logic [3:0] alert_en_q_fpv;
  for (genvar s = 0; s <= 3; s++) begin : gen_alert_en_rd
    assign alert_en_q_fpv[s] = i_alert_handler.reg2hw.alert_en[s].q;
  end

  // read/write assertions for register: alert_en
  `ASSERT(alert_en_wr_A, wr_P(3, 8'h14, alert_en_q_fpv[3:0], i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(alert_en_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, alert_en_q_fpv[3:0]), clk_i, !rst_ni)
  `ASSERT(alert_en_rd_A, rd_P(3, 8'h14, alert_en_q_fpv[3:0]), clk_i, !rst_ni)

  // define local fpv variable for the multi_reg
  logic [7:0] alert_class_q_fpv;
  for (genvar s = 0; s <= 4-1; s++) begin : gen_alert_class_rd
    assign alert_class_q_fpv[((s+1)*2-1):s*2] = i_alert_handler.reg2hw.alert_class[s].q;
  end

  // read/write assertions for register: alert_class
  `ASSERT(alert_class_wr_A, wr_P(7, 8'h18, alert_class_q_fpv[7:0], i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(alert_class_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, alert_class_q_fpv[7:0]), clk_i, !rst_ni)
  `ASSERT(alert_class_rd_A, rd_P(7, 8'h18, alert_class_q_fpv[7:0]), clk_i, !rst_ni)

  // define local fpv variable for the multi_reg
  logic [3:0] alert_cause_q_fpv;
  for (genvar s = 0; s <= 3; s++) begin : gen_alert_cause_rd
    assign alert_cause_q_fpv[s] = i_alert_handler.reg2hw.alert_cause[s].q;
  end
  logic [3:0] alert_cause_d_fpv;
  for (genvar s = 0; s <= 3; s++) begin : gen_alert_cause_wr
    assign alert_cause_d_fpv[s] = i_alert_handler.hw2reg.alert_cause[s].d;
  end

  // read/write assertions for register: alert_cause
  `ASSERT(alert_cause_wr_A, wr_P(3, 8'h1c, alert_cause_q_fpv[3:0], 0), clk_i, !rst_ni)
  `ASSERT(alert_cause_rd_A, rd_P(3, 8'h1c, alert_cause_d_fpv[3:0]), clk_i, !rst_ni)

  // define local fpv variable for the multi_reg
  logic [3:0] loc_alert_en_q_fpv;
  for (genvar s = 0; s <= 3; s++) begin : gen_loc_alert_en_rd
    assign loc_alert_en_q_fpv[s] = i_alert_handler.reg2hw.loc_alert_en[s].q;
  end

  // read/write assertions for register: loc_alert_en
  `ASSERT(loc_alert_en_wr_A, wr_P(3, 8'h20, loc_alert_en_q_fpv[3:0], i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(loc_alert_en_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, loc_alert_en_q_fpv[3:0]), clk_i, !rst_ni)
  `ASSERT(loc_alert_en_rd_A, rd_P(3, 8'h20, loc_alert_en_q_fpv[3:0]), clk_i, !rst_ni)

  // define local fpv variable for the multi_reg
  logic [7:0] loc_alert_class_q_fpv;
  for (genvar s = 0; s <= 4-1; s++) begin : gen_loc_alert_class_rd
    assign loc_alert_class_q_fpv[((s+1)*2-1):s*2] = i_alert_handler.reg2hw.loc_alert_class[s].q;
  end

  // read/write assertions for register: loc_alert_class
  `ASSERT(loc_alert_class_wr_A, wr_P(7, 8'h24, loc_alert_class_q_fpv[7:0], i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(loc_alert_class_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, loc_alert_class_q_fpv[7:0]), clk_i, !rst_ni)
  `ASSERT(loc_alert_class_rd_A, rd_P(7, 8'h24, loc_alert_class_q_fpv[7:0]), clk_i, !rst_ni)

  // define local fpv variable for the multi_reg
  logic [3:0] loc_alert_cause_q_fpv;
  for (genvar s = 0; s <= 3; s++) begin : gen_loc_alert_cause_rd
    assign loc_alert_cause_q_fpv[s] = i_alert_handler.reg2hw.loc_alert_cause[s].q;
  end
  logic [3:0] loc_alert_cause_d_fpv;
  for (genvar s = 0; s <= 3; s++) begin : gen_loc_alert_cause_wr
    assign loc_alert_cause_d_fpv[s] = i_alert_handler.hw2reg.loc_alert_cause[s].d;
  end

  // read/write assertions for register: loc_alert_cause
  `ASSERT(loc_alert_cause_wr_A, wr_P(3, 8'h28, loc_alert_cause_q_fpv[3:0], 0), clk_i, !rst_ni)
  `ASSERT(loc_alert_cause_rd_A, rd_P(3, 8'h28, loc_alert_cause_d_fpv[3:0]), clk_i, !rst_ni)

  // read/write assertions for register: classa_ctrl
  `ASSERT(classa_ctrl_wr_A, wr_P(13, 8'h2c, i_alert_handler.reg2hw.classa_ctrl.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classa_ctrl_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classa_ctrl.q), clk_i, !rst_ni)
  `ASSERT(classa_ctrl_rd_A, rd_P(13, 8'h2c, i_alert_handler.reg2hw.classa_ctrl.q), clk_i, !rst_ni)

  // read/write assertions for register: classa_clren
  `ASSERT(classa_clren_wr_A, wr_P(0, 8'h30, i_alert_handler.reg2hw.classa_clren.q, 0), clk_i, !rst_ni)
  `ASSERT(classa_clren_rd_A, rd_P(0, 8'h30, i_alert_handler.hw2reg.classa_clren.d), clk_i, !rst_ni)

  // read/write assertions for register: classa_clr
  `ASSERT(classa_clr_wr_A, wr_P(0, 8'h34, i_alert_handler.reg2hw.classa_clr.q, i_alert_handler.i_reg_top.classa_clren_qs), clk_i, !rst_ni)
  `ASSERT(classa_clr_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.classa_clren_qs, i_alert_handler.reg2hw.classa_clr.q), clk_i, !rst_ni)

  // read/write assertions for register: classa_accum_cnt
  `ASSERT(classa_accum_cnt_rd_A, rd_ext_P(15, 8'h38, i_alert_handler.hw2reg.classa_accum_cnt.d), clk_i, !rst_ni)

  // read/write assertions for register: classa_accum_thresh
  `ASSERT(classa_accum_thresh_wr_A, wr_P(15, 8'h3c, i_alert_handler.reg2hw.classa_accum_thresh.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classa_accum_thresh_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classa_accum_thresh.q), clk_i, !rst_ni)
  `ASSERT(classa_accum_thresh_rd_A, rd_P(15, 8'h3c, i_alert_handler.reg2hw.classa_accum_thresh.q), clk_i, !rst_ni)

  // read/write assertions for register: classa_timeout_cyc
  `ASSERT(classa_timeout_cyc_wr_A, wr_P(31, 8'h40, i_alert_handler.reg2hw.classa_timeout_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classa_timeout_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classa_timeout_cyc.q), clk_i, !rst_ni)
  `ASSERT(classa_timeout_cyc_rd_A, rd_P(31, 8'h40, i_alert_handler.reg2hw.classa_timeout_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classa_phase0_cyc
  `ASSERT(classa_phase0_cyc_wr_A, wr_P(31, 8'h44, i_alert_handler.reg2hw.classa_phase0_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classa_phase0_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classa_phase0_cyc.q), clk_i, !rst_ni)
  `ASSERT(classa_phase0_cyc_rd_A, rd_P(31, 8'h44, i_alert_handler.reg2hw.classa_phase0_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classa_phase1_cyc
  `ASSERT(classa_phase1_cyc_wr_A, wr_P(31, 8'h48, i_alert_handler.reg2hw.classa_phase1_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classa_phase1_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classa_phase1_cyc.q), clk_i, !rst_ni)
  `ASSERT(classa_phase1_cyc_rd_A, rd_P(31, 8'h48, i_alert_handler.reg2hw.classa_phase1_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classa_phase2_cyc
  `ASSERT(classa_phase2_cyc_wr_A, wr_P(31, 8'h4c, i_alert_handler.reg2hw.classa_phase2_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classa_phase2_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classa_phase2_cyc.q), clk_i, !rst_ni)
  `ASSERT(classa_phase2_cyc_rd_A, rd_P(31, 8'h4c, i_alert_handler.reg2hw.classa_phase2_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classa_phase3_cyc
  `ASSERT(classa_phase3_cyc_wr_A, wr_P(31, 8'h50, i_alert_handler.reg2hw.classa_phase3_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classa_phase3_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classa_phase3_cyc.q), clk_i, !rst_ni)
  `ASSERT(classa_phase3_cyc_rd_A, rd_P(31, 8'h50, i_alert_handler.reg2hw.classa_phase3_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classa_esc_cnt
  `ASSERT(classa_esc_cnt_rd_A, rd_ext_P(31, 8'h54, i_alert_handler.hw2reg.classa_esc_cnt.d), clk_i, !rst_ni)

  // read/write assertions for register: classa_state
  `ASSERT(classa_state_rd_A, rd_ext_P(2, 8'h58, i_alert_handler.hw2reg.classa_state.d), clk_i, !rst_ni)

  // read/write assertions for register: classb_ctrl
  `ASSERT(classb_ctrl_wr_A, wr_P(13, 8'h5c, i_alert_handler.reg2hw.classb_ctrl.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classb_ctrl_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classb_ctrl.q), clk_i, !rst_ni)
  `ASSERT(classb_ctrl_rd_A, rd_P(13, 8'h5c, i_alert_handler.reg2hw.classb_ctrl.q), clk_i, !rst_ni)

  // read/write assertions for register: classb_clren
  `ASSERT(classb_clren_wr_A, wr_P(0, 8'h60, i_alert_handler.reg2hw.classb_clren.q, 0), clk_i, !rst_ni)
  `ASSERT(classb_clren_rd_A, rd_P(0, 8'h60, i_alert_handler.hw2reg.classb_clren.d), clk_i, !rst_ni)

  // read/write assertions for register: classb_clr
  `ASSERT(classb_clr_wr_A, wr_P(0, 8'h64, i_alert_handler.reg2hw.classb_clr.q, i_alert_handler.i_reg_top.classb_clren_qs), clk_i, !rst_ni)
  `ASSERT(classb_clr_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.classb_clren_qs, i_alert_handler.reg2hw.classb_clr.q), clk_i, !rst_ni)

  // read/write assertions for register: classb_accum_cnt
  `ASSERT(classb_accum_cnt_rd_A, rd_ext_P(15, 8'h68, i_alert_handler.hw2reg.classb_accum_cnt.d), clk_i, !rst_ni)

  // read/write assertions for register: classb_accum_thresh
  `ASSERT(classb_accum_thresh_wr_A, wr_P(15, 8'h6c, i_alert_handler.reg2hw.classb_accum_thresh.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classb_accum_thresh_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classb_accum_thresh.q), clk_i, !rst_ni)
  `ASSERT(classb_accum_thresh_rd_A, rd_P(15, 8'h6c, i_alert_handler.reg2hw.classb_accum_thresh.q), clk_i, !rst_ni)

  // read/write assertions for register: classb_timeout_cyc
  `ASSERT(classb_timeout_cyc_wr_A, wr_P(31, 8'h70, i_alert_handler.reg2hw.classb_timeout_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classb_timeout_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classb_timeout_cyc.q), clk_i, !rst_ni)
  `ASSERT(classb_timeout_cyc_rd_A, rd_P(31, 8'h70, i_alert_handler.reg2hw.classb_timeout_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classb_phase0_cyc
  `ASSERT(classb_phase0_cyc_wr_A, wr_P(31, 8'h74, i_alert_handler.reg2hw.classb_phase0_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classb_phase0_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classb_phase0_cyc.q), clk_i, !rst_ni)
  `ASSERT(classb_phase0_cyc_rd_A, rd_P(31, 8'h74, i_alert_handler.reg2hw.classb_phase0_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classb_phase1_cyc
  `ASSERT(classb_phase1_cyc_wr_A, wr_P(31, 8'h78, i_alert_handler.reg2hw.classb_phase1_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classb_phase1_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classb_phase1_cyc.q), clk_i, !rst_ni)
  `ASSERT(classb_phase1_cyc_rd_A, rd_P(31, 8'h78, i_alert_handler.reg2hw.classb_phase1_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classb_phase2_cyc
  `ASSERT(classb_phase2_cyc_wr_A, wr_P(31, 8'h7c, i_alert_handler.reg2hw.classb_phase2_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classb_phase2_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classb_phase2_cyc.q), clk_i, !rst_ni)
  `ASSERT(classb_phase2_cyc_rd_A, rd_P(31, 8'h7c, i_alert_handler.reg2hw.classb_phase2_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classb_phase3_cyc
  `ASSERT(classb_phase3_cyc_wr_A, wr_P(31, 8'h80, i_alert_handler.reg2hw.classb_phase3_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classb_phase3_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classb_phase3_cyc.q), clk_i, !rst_ni)
  `ASSERT(classb_phase3_cyc_rd_A, rd_P(31, 8'h80, i_alert_handler.reg2hw.classb_phase3_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classb_esc_cnt
  `ASSERT(classb_esc_cnt_rd_A, rd_ext_P(31, 8'h84, i_alert_handler.hw2reg.classb_esc_cnt.d), clk_i, !rst_ni)

  // read/write assertions for register: classb_state
  `ASSERT(classb_state_rd_A, rd_ext_P(2, 8'h88, i_alert_handler.hw2reg.classb_state.d), clk_i, !rst_ni)

  // read/write assertions for register: classc_ctrl
  `ASSERT(classc_ctrl_wr_A, wr_P(13, 8'h8c, i_alert_handler.reg2hw.classc_ctrl.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classc_ctrl_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classc_ctrl.q), clk_i, !rst_ni)
  `ASSERT(classc_ctrl_rd_A, rd_P(13, 8'h8c, i_alert_handler.reg2hw.classc_ctrl.q), clk_i, !rst_ni)

  // read/write assertions for register: classc_clren
  `ASSERT(classc_clren_wr_A, wr_P(0, 8'h90, i_alert_handler.reg2hw.classc_clren.q, 0), clk_i, !rst_ni)
  `ASSERT(classc_clren_rd_A, rd_P(0, 8'h90, i_alert_handler.hw2reg.classc_clren.d), clk_i, !rst_ni)

  // read/write assertions for register: classc_clr
  `ASSERT(classc_clr_wr_A, wr_P(0, 8'h94, i_alert_handler.reg2hw.classc_clr.q, i_alert_handler.i_reg_top.classc_clren_qs), clk_i, !rst_ni)
  `ASSERT(classc_clr_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.classc_clren_qs, i_alert_handler.reg2hw.classc_clr.q), clk_i, !rst_ni)

  // read/write assertions for register: classc_accum_cnt
  `ASSERT(classc_accum_cnt_rd_A, rd_ext_P(15, 8'h98, i_alert_handler.hw2reg.classc_accum_cnt.d), clk_i, !rst_ni)

  // read/write assertions for register: classc_accum_thresh
  `ASSERT(classc_accum_thresh_wr_A, wr_P(15, 8'h9c, i_alert_handler.reg2hw.classc_accum_thresh.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classc_accum_thresh_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classc_accum_thresh.q), clk_i, !rst_ni)
  `ASSERT(classc_accum_thresh_rd_A, rd_P(15, 8'h9c, i_alert_handler.reg2hw.classc_accum_thresh.q), clk_i, !rst_ni)

  // read/write assertions for register: classc_timeout_cyc
  `ASSERT(classc_timeout_cyc_wr_A, wr_P(31, 8'ha0, i_alert_handler.reg2hw.classc_timeout_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classc_timeout_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classc_timeout_cyc.q), clk_i, !rst_ni)
  `ASSERT(classc_timeout_cyc_rd_A, rd_P(31, 8'ha0, i_alert_handler.reg2hw.classc_timeout_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classc_phase0_cyc
  `ASSERT(classc_phase0_cyc_wr_A, wr_P(31, 8'ha4, i_alert_handler.reg2hw.classc_phase0_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classc_phase0_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classc_phase0_cyc.q), clk_i, !rst_ni)
  `ASSERT(classc_phase0_cyc_rd_A, rd_P(31, 8'ha4, i_alert_handler.reg2hw.classc_phase0_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classc_phase1_cyc
  `ASSERT(classc_phase1_cyc_wr_A, wr_P(31, 8'ha8, i_alert_handler.reg2hw.classc_phase1_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classc_phase1_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classc_phase1_cyc.q), clk_i, !rst_ni)
  `ASSERT(classc_phase1_cyc_rd_A, rd_P(31, 8'ha8, i_alert_handler.reg2hw.classc_phase1_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classc_phase2_cyc
  `ASSERT(classc_phase2_cyc_wr_A, wr_P(31, 8'hac, i_alert_handler.reg2hw.classc_phase2_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classc_phase2_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classc_phase2_cyc.q), clk_i, !rst_ni)
  `ASSERT(classc_phase2_cyc_rd_A, rd_P(31, 8'hac, i_alert_handler.reg2hw.classc_phase2_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classc_phase3_cyc
  `ASSERT(classc_phase3_cyc_wr_A, wr_P(31, 8'hb0, i_alert_handler.reg2hw.classc_phase3_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classc_phase3_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classc_phase3_cyc.q), clk_i, !rst_ni)
  `ASSERT(classc_phase3_cyc_rd_A, rd_P(31, 8'hb0, i_alert_handler.reg2hw.classc_phase3_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classc_esc_cnt
  `ASSERT(classc_esc_cnt_rd_A, rd_ext_P(31, 8'hb4, i_alert_handler.hw2reg.classc_esc_cnt.d), clk_i, !rst_ni)

  // read/write assertions for register: classc_state
  `ASSERT(classc_state_rd_A, rd_ext_P(2, 8'hb8, i_alert_handler.hw2reg.classc_state.d), clk_i, !rst_ni)

  // read/write assertions for register: classd_ctrl
  `ASSERT(classd_ctrl_wr_A, wr_P(13, 8'hbc, i_alert_handler.reg2hw.classd_ctrl.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classd_ctrl_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classd_ctrl.q), clk_i, !rst_ni)
  `ASSERT(classd_ctrl_rd_A, rd_P(13, 8'hbc, i_alert_handler.reg2hw.classd_ctrl.q), clk_i, !rst_ni)

  // read/write assertions for register: classd_clren
  `ASSERT(classd_clren_wr_A, wr_P(0, 8'hc0, i_alert_handler.reg2hw.classd_clren.q, 0), clk_i, !rst_ni)
  `ASSERT(classd_clren_rd_A, rd_P(0, 8'hc0, i_alert_handler.hw2reg.classd_clren.d), clk_i, !rst_ni)

  // read/write assertions for register: classd_clr
  `ASSERT(classd_clr_wr_A, wr_P(0, 8'hc4, i_alert_handler.reg2hw.classd_clr.q, i_alert_handler.i_reg_top.classd_clren_qs), clk_i, !rst_ni)
  `ASSERT(classd_clr_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.classd_clren_qs, i_alert_handler.reg2hw.classd_clr.q), clk_i, !rst_ni)

  // read/write assertions for register: classd_accum_cnt
  `ASSERT(classd_accum_cnt_rd_A, rd_ext_P(15, 8'hc8, i_alert_handler.hw2reg.classd_accum_cnt.d), clk_i, !rst_ni)

  // read/write assertions for register: classd_accum_thresh
  `ASSERT(classd_accum_thresh_wr_A, wr_P(15, 8'hcc, i_alert_handler.reg2hw.classd_accum_thresh.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classd_accum_thresh_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classd_accum_thresh.q), clk_i, !rst_ni)
  `ASSERT(classd_accum_thresh_rd_A, rd_P(15, 8'hcc, i_alert_handler.reg2hw.classd_accum_thresh.q), clk_i, !rst_ni)

  // read/write assertions for register: classd_timeout_cyc
  `ASSERT(classd_timeout_cyc_wr_A, wr_P(31, 8'hd0, i_alert_handler.reg2hw.classd_timeout_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classd_timeout_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classd_timeout_cyc.q), clk_i, !rst_ni)
  `ASSERT(classd_timeout_cyc_rd_A, rd_P(31, 8'hd0, i_alert_handler.reg2hw.classd_timeout_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classd_phase0_cyc
  `ASSERT(classd_phase0_cyc_wr_A, wr_P(31, 8'hd4, i_alert_handler.reg2hw.classd_phase0_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classd_phase0_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classd_phase0_cyc.q), clk_i, !rst_ni)
  `ASSERT(classd_phase0_cyc_rd_A, rd_P(31, 8'hd4, i_alert_handler.reg2hw.classd_phase0_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classd_phase1_cyc
  `ASSERT(classd_phase1_cyc_wr_A, wr_P(31, 8'hd8, i_alert_handler.reg2hw.classd_phase1_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classd_phase1_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classd_phase1_cyc.q), clk_i, !rst_ni)
  `ASSERT(classd_phase1_cyc_rd_A, rd_P(31, 8'hd8, i_alert_handler.reg2hw.classd_phase1_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classd_phase2_cyc
  `ASSERT(classd_phase2_cyc_wr_A, wr_P(31, 8'hdc, i_alert_handler.reg2hw.classd_phase2_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classd_phase2_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classd_phase2_cyc.q), clk_i, !rst_ni)
  `ASSERT(classd_phase2_cyc_rd_A, rd_P(31, 8'hdc, i_alert_handler.reg2hw.classd_phase2_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classd_phase3_cyc
  `ASSERT(classd_phase3_cyc_wr_A, wr_P(31, 8'he0, i_alert_handler.reg2hw.classd_phase3_cyc.q, i_alert_handler.i_reg_top.regen_qs), clk_i, !rst_ni)
  `ASSERT(classd_phase3_cyc_stable_A, wr_regen_stable_P(i_alert_handler.i_reg_top.regen_qs, i_alert_handler.reg2hw.classd_phase3_cyc.q), clk_i, !rst_ni)
  `ASSERT(classd_phase3_cyc_rd_A, rd_P(31, 8'he0, i_alert_handler.reg2hw.classd_phase3_cyc.q), clk_i, !rst_ni)

  // read/write assertions for register: classd_esc_cnt
  `ASSERT(classd_esc_cnt_rd_A, rd_ext_P(31, 8'he4, i_alert_handler.hw2reg.classd_esc_cnt.d), clk_i, !rst_ni)

  // read/write assertions for register: classd_state
  `ASSERT(classd_state_rd_A, rd_ext_P(2, 8'he8, i_alert_handler.hw2reg.classd_state.d), clk_i, !rst_ni)

endmodule
